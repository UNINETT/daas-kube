apiVersion: v1
kind: ServiceAccount
metadata:
  name: dnsmasq-node
  namespace: kube-system

---
# UNINETT - Custom PodSecurotyPolicy to allow running in hostnetnamespace
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: dnsmasq-node
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
spec:
  hostPID: false
  hostIPC: false
  privileged: false
  hostNetwork: true
  hostPorts:
  - min: 53
    max: 53
  - min: 10054
    max: 10054
  allowedCapabilities:
  - KILL
  - CHOWN
  - FSETID
  - FOWNER
  - NET_RAW
  - SETGID
  - SETUID
  - SETFCAP
  - SETPCAP
  - AUDIT_WRITE
  - NET_BIND_SERVICE
  requiredDropCapabilities:
  - MKNOD
  - DAC_OVERRIDE
  - SYS_CHROOT
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - 'secret'
  - 'configMap'
  - 'downwardAPI'

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dnsmasq-node-psp
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - dnsmasq-node
  verbs:
  - use

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dnsmasq-node-psp
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dnsmasq-node-psp
subjects:
  - kind: ServiceAccount
    name: dnsmasq-node
    namespace: kube-system

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: dnsmasq-node
  namespace: kube-system
  labels:
    k8s-app: dnsmasq-node
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: dnsmasq-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      serviceAccount: dnsmasq-node
      containers:
      - name: dnsmasq
        image: k8s.gcr.io/k8s-dns-dnsmasq-amd64:1.14.10
        livenessProbe:
          httpGet:
            path: /healthcheck/dnsmasq
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - --cache-size=10000
        - --no-negcache
        - --server=/cluster.local/{{dns_service_ip}}
        - --server=/in-addr.arpa/{{dns_service_ip}}
        - --server=/ip6.arpa/{{dns_service_ip}}
        - --log-facility=-
        - --address=/org.cluster.local/org.svc.cluster.local/com.cluster.local/com.svc.cluster.local/net.cluster.local/net.svc.cluster.local/io.cluster.local/io.svc.cluster.local/no.cluster.local/no.svc.cluster.local/
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        resources:
          requests:
            cpu: 350m
            memory: 300Mi
      - name: sidecar
        image: k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - --v=2
        - --logtostderr
        - --probe=dnsmasq,127.0.0.1:53,uninett.no,5,A
        ports:
        - containerPort: 10054
          name: metrics
          protocol: TCP
        resources:
          requests:
            memory: 100Mi
            cpu: 30m
      hostNetwork: true
      dnsPolicy: Default  # Don't use cluster DNS.
