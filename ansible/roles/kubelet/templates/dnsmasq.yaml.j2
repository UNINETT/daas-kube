apiVersion: v1
kind: Pod
metadata:
  name: dnsmasq-node
  namespace: kube-system
  labels:
    k8s-app: dnsmasq-node
spec:
  containers:
  - name: dnsmasq
    image: k8s.gcr.io/k8s-dns-dnsmasq-amd64:1.14.10
    livenessProbe:
      httpGet:
        path: /healthcheck/dnsmasq
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    args:
    - --cache-size=10000
    - --no-negcache
    - --server=/cluster.local/{{dns_service_ip}}
    - --server=/in-addr.arpa/{{dns_service_ip}}
    - --server=/ip6.arpa/{{dns_service_ip}}
    - --log-facility=-
    ports:
    - containerPort: 53
      name: dns
      protocol: UDP
    - containerPort: 53
      name: dns-tcp
      protocol: TCP
    resources:
      requests:
        cpu: 350m
        memory: 300Mi
  - name: sidecar
    image: k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.10
    livenessProbe:
      httpGet:
        path: /metrics
        port: 10054
        scheme: HTTP
      initialDelaySeconds: 60
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    args:
    - --v=2
    - --logtostderr
    - --probe=dnsmasq,127.0.0.1:53,uninett.no,5,A
    ports:
    - containerPort: 10054
      name: metrics
      protocol: TCP
    resources:
      requests:
        memory: 100Mi
        cpu: 30m
  hostNetwork: true
  dnsPolicy: Default  # Don't use cluster DNS.
